generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PROD")
}

model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  username           String   @unique
  displayName        String
  nfts_order         Int[]
  description        String
  views              Int
  likes              Int
  hash               String
  collections_filter String[]
  collections_list   String[]
  networth           Float    @default(0)
  nfts               Nft[]
  wallets            Wallet[]
}

model Nft {
  id                 String  @id @default(uuid())
  name               String
  description        String?
  collection         String?
  external_url       String?
  image_url          String?
  userId             String?
  last_sale_price    Int?
  last_sale_symbol   String?
  properties         String
  token_id           String
  rarity_rank        Int?
  collection_address String?
  collection_size    Int?
  User               User?   @relation(fields: [userId], references: [id])
}

model Wallet {
  id            String @id @default(uuid())
  blockchain_id String @default("ETH")
  address       String @unique
  external_url  String @unique
  userId        String
  User          User   @relation(fields: [userId], references: [id])
}

model NftRarity {
  id               String           @id @default(uuid())
  rarity_rank      Int?
  token_id         String           @unique
  collectionID     String
  CollectionRarity CollectionRarity @relation(fields: [collectionID], references: [id], onDelete: Cascade)
}

model CollectionRarity {
  id               String      @id @default(uuid())
  contract_address String      @unique
  NftRarity        NftRarity[]
}

model collectiontraitfloor {
  id               String @id @default(uuid())
  address          String @unique
  trait_floor_dict String
}

model NftRarity {
  id               String           @id
  rarity_rank      Int?
  token_id         String           @unique
  collectionID     String
  CollectionRarity CollectionRarity @relation(fields: [collectionID], references: [id])
}
